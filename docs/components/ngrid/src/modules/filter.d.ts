import { JSONSchema7 } from 'json-schema';
import { FormatParams, GridColumn, GridFilter, Operator, OptionValue } from '../typings';
import { FilterConfig } from './filter-config';
type FilterValueType = string | number | boolean;
type FilterEntry<T extends FilterValueType> = {
    field: string;
    filter: GridFilter<T> | null;
};
export declare const FILTER_SEPARATOR = "|";
export declare const EMPTY_FILTER: GridFilter;
export declare function makeEmptyFilter(column: GridColumn<any>, schema?: JSONSchema7): GridFilter;
export declare function createFilter<T extends FilterValueType>(type: FilterConfig["type"], optionValue: OptionValue<T> | null, operator: Operator, field?: string): GridFilter<string | number | boolean>;
export declare function applyFilter<T extends FilterValueType>(filters: Record<string, GridFilter<T>> | undefined, { field, filter }: FilterEntry<T>): Record<string, GridFilter<T>>;
export declare function shouldRefresh<T extends FilterValueType>(filters: Record<string, GridFilter<T>> | undefined, { field, filter }: FilterEntry<T>): boolean;
export declare function isEmptyFilter<T extends FilterValueType>(filter: GridFilter<T> | null | undefined): boolean;
export declare function asOperator(operator: string): Operator;
export declare function operatorHasValue(operator: Operator): boolean;
export declare function operatorChangeHandler(previousValue: OptionValue | null, setValue: (newValue: OptionValue | null) => void, setOperator: (newOperator: Operator) => void): (operator: Operator) => void;
export declare function formatFilter(filterType: FilterConfig["type"], filter: GridFilter<string | number | boolean>, formatParams?: FormatParams | undefined): string;
export declare function isFilterActive<T>(filters: Record<string, GridFilter<string | number | boolean>>, column: GridColumn<T>): boolean;
export declare function normalizeFilterValue<T>(filter: GridFilter<string | number | boolean> | undefined, column: GridColumn<T>): GridFilter<string | number | boolean> | undefined;
export {};
